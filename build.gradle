/*
 * Copyright 2013, The Thymeleaf Project (http://www.thymeleaf.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gradle build script to perform a variety of support tasks for the Thymeleaf
 * Extras Eclipse Plugin project.
 * 
 * @author Emanuel Rabina
 */

apply from: 'https://raw.githubusercontent.com/ultraq/gradle-support/3.4.0/jaxb.gradle'

def corePluginDir = 'org.thymeleaf.extras.eclipse.core'
def contentassistPluginDir = 'org.thymeleaf.extras.eclipse.contentassist'

repositories {
	mavenCentral()
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
}

/**
 * Create the depdendency graphs for each of the plugins.  This is used for the
 * 'downloadDependencies' task so it can copy all necessary JARs into each
 * project, saving us having to store those JARs in source control (like we used
 * to, since this is an OSGi environment, not a Maven one). 
 */
configurations.create('core')
configurations.create('contentassist')

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
	core(
		'javax.annotation:javax.annotation-api:1.3.2',
		'javax.inject:javax.inject:1',
		'nz.net.ultraq.jaxb:jaxb-utilities:2.1.0-SNAPSHOT',
		'nz.net.ultraq.extensions:groovy-extensions:1.1.0',
		'nz.net.ultraq.extensions:profiling-extensions:0.6.1',
		'org.attoparser:attoparser:2.0.5.RELEASE',
		'org.codehaus.groovy:groovy:3.0.9',
		'org.springframework:spring-context:5.2.0.RELEASE',

		// For unit tests
		'org.junit.jupiter:junit-jupiter-engine:5.7.2',
		'org.mockito:mockito-core:3.12.4',
		'org.springframework:spring-test:5.2.0.RELEASE'
	)
	contentassist(
		'javax.inject:javax.inject:1',
		'org.codehaus.groovy:groovy:3.0.9',
		'org.springframework:spring-context:5.2.0.RELEASE',

		// For unit tests
		'org.junit.jupiter:junit-jupiter-engine:5.7.2',
		'org.mockito:mockito-core:3.12.4',
		'org.springframework:spring-test:5.2.0.RELEASE'
	)
}

/**
 * Download the dependencies for each plugin and place them into their
 * respective libs directories. 
 */
task downloadDependencies(
	description: 'Download Maven dependencies into the libs directory for each plugin') {

	copy {
		from configurations.core
		into "${corePluginDir}/libs"
	}
	copy {
		from configurations.contentassist
		into "${contentassistPluginDir}/libs"
	}
}

/**
 * Configure the XJC task to generate Java classes from the dialect help schema
 * in the core plugin.
 */
xjc {
	schemaDir = "${corePluginDir}/schemas"
	outputDir = "${corePluginDir}/src/main/java"
	classes = [
		'**/dialect/xml/*.java'
	]
	args = [
		'-Xinject-code'
	]
}
